#ifndef __EXPLOIT_H__
#define __EXPLOIT_H__

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <assert.h>
#include <m4ri/m4ri.h>

#include "cuckoo.h"

/* Macros */

// MISC

#define SORTED_TABLE_FMT     "sorted_%.3d.tbl"
#define SORTED_INDEX_FMT     "sorted_%.3d.idx"
#define SORTED_CUCKOO_FMT    "sorted_%.3d.cuckoo"
#define UNSORTED_TABLE_FMT   "unsorted_%.3d_%.10d_%.10d.tbl"

#define OPTIM_LKUP_DEFAULT   0 // Slow bsearch
#define OPTIM_LKUP_CUCKOO    1
#define OPTIM_LKUP_BSEARCH   2 // Fast bsearch

#define OPTIM_MEM_LOW        0 // At least 16 Gb of RAM
#define OPTIM_MEM_HIGH       1 // At least 64 Gb of RAM // Default

#ifndef __PAGE_SZ
#define __PAGE_SZ            4096
#endif
#define ROUND_PAGESZ(x)      ( ((x) & (__PAGE_SZ-1)) == 0 ? ((x)/__PAGE_SZ) : (((x) + __PAGE_SZ - (x & (__PAGE_SZ-1))) / __PAGE_SZ) )

// optimizations

#define likely(x) __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)

#ifndef OPTIM_MEM
#define OPTIM_MEM                     OPTIM_MEM_HIGH
#endif

#ifndef OPTIM_BATCH
#define OPTIM_BATCH                   0
#endif

#ifndef OPTIM_SKIP_COLLISIONS
#define OPTIM_SKIP_COLLISIONS         1
#endif

#ifndef OPTIM_SCHED
#define OPTIM_SCHED                   1 // Needs a small patch before.
#endif

#ifndef OPTIM_LOOKUP
#define OPTIM_LOOKUP                  OPTIM_LKUP_CUCKOO
//~ #define OPTIM_LOOKUP                  OPTIM_LKUP_BSEARCH
#endif

#ifndef OPTIM_LIN_ALG
#define OPTIM_LIN_ALG                 1
#endif

// OPTIM_LKUP_BSEARCH

#define NR_BITS_IDX                   8
#define MASK_IDX                      ((1<<NR_BITS_IDX)-1)

#if OPTIM_MEM == OPTIM_MEM_HIGH
#define STG1A_NR_ROUNDS               2
#define STG1B_NR_ROUNDS               1
#define STG2_NR_ROUNDS                2
#else
#define STG1A_NR_ROUNDS               4
#define STG1B_NR_ROUNDS               2
#define STG2_NR_ROUNDS                4
#endif

// dbg

#ifndef DEBUG_TIMING
#define DEBUG_TIMING        0
#endif /* DEBUG_TIMING */

#ifndef DEBUG_MALLOC
#define DEBUG_MALLOC        0
#endif /* DEBUG_MALLOC */

#ifndef DEBUG_TESTCASE
#define DEBUG_TESTCASE      0
#endif /* DEBUG_TESTCASE */

#ifndef DEBUG_ASSERT
#define DEBUG_ASSERT        0
#endif /* DEBUG_ASSERT */

#if DEBUG_ASSERT
#define ASSERT(x)   assert(x)
#else
#define ASSERT(x)
#endif

// GEA1

#define GEA1_KEY_LENGTH     64
#define GEA1_IV_LENGTH      32

#define SHIFT_A  0
#define SHIFT_B  16
#define SHIFT_C  32

#define REG_A_SIZE  31
#define REG_B_SIZE  32
#define REG_C_SIZE  33

#define NR_BITS_V     8 // Real size is 8
#define NR_BITS_TAC  24 // Real size is 24
#define NR_BITS_UB   32 // Real size is 32

#define NR_BITS_V_MAX    8
#define NR_BITS_TAC_MAX 24
#define NR_BITS_UB_MAX  32

#define NR_V_ELEMENTS_MAX   (1<<NR_BITS_V_MAX)
#define NR_TAC_ELEMENTS_MAX (1<<NR_BITS_TAC_MAX)
#define NR_UB_ELEMENTS_MAX  (1L<<NR_BITS_UB_MAX)

#define NR_V_ELEMENTS   (1 << NR_BITS_V)
#define NR_TAC_ELEMENTS (1 << NR_BITS_TAC)
#define NR_UB_ELEMENTS  (1L << NR_BITS_UB)

/* Types */

#if OPTIM_BATCH
#define NR_KS_MAX           256
#else
#define NR_KS_MAX           1
#endif

struct _ks_array {

    uint64_t bitvector;
    uint64_t bitmask;
    uint32_t bitlength;
    int solved;

};

struct _target {

    struct _ks_array keystream[NR_KS_MAX];
    int nr_targets;
    int nr_state_recovered;

};

struct arguments {

    int mode;

#define MODE_TEST           0
#define MODE_BENCH          1
#define MODE_PRECOMPUTATION 2
#define MODE_BRUTEFORCE     3
#define MODE_REVERSE        4

    char *dir_name;
#if OPTIM_BATCH
    char *batch;
#endif
    struct _target target;
    uint32_t IV;
    int IV_is_set;
    uint64_t S;
    int S_is_set;
    bool flag;
    int flag_is_set;
    int nr_cores;
    int verbosity;
    int all;

};

struct lp_arg {

    int id;
    int nr_cores;
    char *dirname;
    key_t key;
    time_t start;
    int round_idx;
    int early_exit;

};

/* Prototypes */

// bench.c
void bench_LFSR_B(void);
void bench_RegisterA(void);
void bench_RegisterA2(void);
void bench_RegisterB(void);
void bench_RegisterB2(void);
void bench_RegisterC(void);
void bench_RegisterC2(void);
void bench_sort1(void);
void bench_sort2(char *);

// print.c
void print_column_vector(mzd_t *, int, char *);
void print_line_vector(mzd_t *, int, char *);
void print_list(uint8_t *, int, char *);
void print_uint64_array_as_hex(uint64_t [], int);

// test.c
void test_cpu_load(void);
void test_hw(void);
void test_rotate(void);
void test_init_S(void);
void test_initA(void);
void test_initB(void);
void test_initC(void);
void test_GEA1(void);
void test_retrieve_K(void);
void test_transform_state1(void);
void test_transform_state2(void);
void test_registerA(void);
void test_registerB(void);
void test_registerC(void);

// gea1.c
void clock_S_backward(uint8_t *, uint8_t *, uint8_t *, int);
void clock_S_forward(uint8_t *, uint8_t *, uint8_t *, int);
void setup_f_table(void);
void init_S(uint8_t *, uint8_t *, uint8_t *, int);
uint64_t lfsr_galois_A(uint64_t, int);
uint64_t lfsr_galois_B(uint64_t, int);
uint64_t lfsr_galois_C(uint64_t, int);
uint64_t RegisterA(uint64_t, int);
uint64_t RegisterB(uint32_t, int);
uint64_t RegisterC(uint64_t, int);
uint64_t init_A(uint64_t);
uint64_t init_B(uint64_t);
uint64_t init_C(uint64_t);
int GEA1(uint64_t, uint32_t, int, uint64_t *);

// linear_alg.c
int setup_MA_matrix(void);
int setup_MB_matrix(void);
int setup_MC_matrix(void);
void free_MA_matrix(void);
void free_MB_matrix(void);
void free_MC_matrix(void);
void setup_v_basis(void);
void setup_tac_basis(void);
void setup_ub_basis(void);
void precompute_v_elements(void);
#if OPTIM_LIN_ALG
void setup_f_MA_MC_elements(void);
void setup_f_MB_elements(void);
#endif

// sched.c
#if OPTIM_SCHED
void select_computation_scheduling(void);
void select_io_scheduling(void);
#endif

// sort_cuckoo.c
void cuckoo_printBucket(BUCKET *);
void cuckoo_setup_ht(BUCKET **);
void cuckoo_free_ht(BUCKET **);
int cuckoo_put(uint32_t, uint32_t, BUCKET *);

// sort.c
void radix_sort(uint64_t [], uint32_t);
int b_search32(uint32_t, uint32_t *, uint32_t);
int seq_search32(uint32_t, uint32_t *, uint32_t);
int b_search64(uint32_t, uint64_t *, uint32_t);
int seq_search64(uint32_t, uint64_t *, uint32_t);

// cpu.c
void cpu_get_work(uint64_t *, uint64_t *, uint32_t, uint32_t, uint32_t, uint32_t, uint64_t);
int cpu_bind(int);
int cpu_get_nr_cores(void);

// data.c
int alloc_all_sorted_Tab(void);
void free_all_sorted_Tab(void);
int load_sorted_Tab(char *, int); // bsearch
int load_hash_Tab(char *, int, int);   // cuckoo
void unload_hash_Tab(int);// cuckoo
int alloc_unsorted_Tab(int, int);
void free_unsorted_Tab(int, int);
int save_unsorted_Tab(int, int, char *);
int sort_files(char *);

// args.c
int hamming_weight(uint64_t);

// stage1.c
int stg1a_create_raw_data(void *);
int stg1b_create_lkup_tables(void *);

// stage2.c
int stg2_state_recovery(void *arg);

// stage3.c
void retrieve_K(uint8_t *, uint8_t *, uint8_t *, int);

// main.c
void do_tests(void);
void do_bench(char *);
int do_precomputation(char *);
int do_bruteforce(struct arguments *args);

#endif /* __EXPLOIT_H__ */
